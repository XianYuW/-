需求是软件项目成败的关键
越早发现需求的错误，越早改正，代价越小

好的需求---定义：无歧义，完整，一致，可检验，确定，可跟踪，正确，可行和必要的


IEEE软件工程标准词汇表定义【需求】为：
      >用户解决问题或达到目标所需的条件或 能力
      >系统或系统部件要满足合同、标准、规范或其他正式规定文档所需具有的条件或能力
      >一种反映上面所描述的条件或能力的文档说明
      
另一个更加包容且精炼的定义：
      >用户解决某一问题或达到某一目的所需的软件功能
      >系统或系统部件要满足合同、标准、规范或其他正式规定文档而必须满足或具备的软件功能
   
   
   
   
好需求应具有的特性：
      >无歧义性
              产生歧义的原因：*同一个词具有多种含义；编写人员会下意识假设所有人对某个主题都有和自己一样的认知水准；缩写；叙述不够具体
              因此  每个需求都都只应该叙述一个主体，在一个需求中包含多个主体，会产生歧义
              消除歧义的方法：对感到模糊的地方刨根问底；关键字技术；其他技术
      >完整性
               >不能遗漏任何需求或必要的信息
               >如果不能确定某项需求，务必用TBD(to be determined ,待确定)来标识
               >项目开发前，必须解决需求中所有的TBD项
               >每项需求必须完整描述即将支付使用的功能
               >遗漏需求将很难查出来
               
               防止遗漏的方法：
                      >注重用户的任务而不是系统的功能
                      >将高层需求分解足够细致，让用户真正的需求显示出来：【“应该、将要、可能”-->“将、必须”】
                      >务必让所有用户类都提出意见，确保每个用例都至少有一个执行者
                      >用多种方式表达需求：UML模型、数据流图、判定表(树)、E-R图等
                      >跟踪系统需求、业务规则、用例，直至详细的软件功能性需求，确保导出了所有必须的功能
                      >检查边界值
      >一致性
              >任何一项需求不会与其他需求或更高层次的需求发生冲突
              >记下每项需求的来源，当发生需求冲突知道该找谁商量
              >项目开发前，必须解决需求不一致问题
      >可检验性
              >需求可以通过合理的方式充分检测
              >开发人员能够确认软件是否满足用户需求
              >测试人员能够设计合理的测试方法，检测系统能正常运行
              >  例如：用新的系统完成报表自动化处理
              >  例如：员工标识号必须在一个有效范围内
      >确定性
              >使得所有人都知道在所有可能的条件下系统应该做什么
              >使用两种不同的需求处理有条件的行为    
                  1.  说明【满足条件】  系统如何
                  2.  说明【不满足条件】  系统如何
      >可跟踪性
              >可跟踪的(软件)需求都能找到它的来源
              >可跟踪的(软件)需求都有它对应的设计单元、实现代码
              >可跟踪的需求都有它被正确实现的测试用例
              >可跟踪的需求都有一个固定、唯一的标识
      >正确性
      >可行性
              >需求必须在已知系统中和环境的限制范围内能够实施
              >需要软件开发人员配合，检查技术可行性
              >忌讳使用"迅速、瞬间、及时"等用词
      >必要性
      
